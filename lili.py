from colorama import init, Fore, Style
import matplotlib.pyplot as plt

# Inicializa o colorama (necess√°rio para funcionar em Windows)
init(autoreset=True)

# Lista de alunos em recupera√ß√£o
recuperacao = [
    "ANA JULIA LIBORIO SOUZA",
    "BEATRIZ VICTORIA CARIAS DA SILVA",
    "CAIO VICTOR DA COSTA SANTOS",
    "GABRIEL ALVES MENDES DA SILVA",
    "GUILHERME DOS SANTOS DA SILVA",
    "ISABELLY APARECIDA DA SILVA",
    "KAUAN REGIS DOS SANTOS NASCIMENTO",
    "MIGUEL FERNANDES OLIVEIRA",
    "MURILO MATIAS DOS SANTOS",
    "ANA GABRIELE DA SILVA NEIVA DE LIMA",
    "BIANCA FERREIRA DOS SANTOS",
    "CLAUDIO DIAS DE OLIVEIRA JUNIOR",
    "DAVID LUIS OLIVEIRA DE BARROS",
    "DOUGLAS DE MORAES LOPES DA SILVA",
    "ELAINE ROCHA COSTA",
    "EMILLY ARAUJO SANTOS",
    "GABRIEL RICARDO GONCALVES DA SILVA",
    "KELVIN XAVIER DE SOUZA",
    "LUCAS DE SOUZA GONCALVES",
    "FLAVIA EDUARDA DE OLIVEIRA SANTOS"
]

# Fun√ß√£o para validar o nome do aluno
def validar_nome(nome):
    nome_formatado = nome.strip().upper()  # Converte para mai√∫sculas
    if not nome_formatado.replace(" ", "").isalnum():  # Permite apenas letras, n√∫meros e espa√ßos
        print(f"{Fore.RED}Nome inv√°lido! Por favor, insira um nome v√°lido.{Style.RESET_ALL}")
        return None
    return nome_formatado

# Fun√ß√£o para solicitar as notas
def solicitar_notas():
    """Solicita as notas do aluno e retorna uma lista de valores v√°lidos."""
    notas = []
    for i in range(1, 5):
        while True:
            try:
                nota = float(input(f"{Fore.YELLOW}Digite a nota do {i}¬∫ bimestre (0 a 10): {Style.RESET_ALL}"))
                if 0 <= nota <= 10:
                    notas.append(nota)
                    break
                else:
                    print(f"{Fore.RED}A nota deve ser um n√∫mero entre 0 e 10.{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}Entrada inv√°lida. Digite um n√∫mero.{Style.RESET_ALL}")
    return notas

# Fun√ß√£o para calcular soma e m√©dia das notas
def calcular_media(notas):
    """Calcula e retorna a soma e a m√©dia das notas."""
    if not notas:
        print(f"{Fore.RED}Erro: Lista de notas est√° vazia. N√£o √© poss√≠vel calcular a m√©dia.{Style.RESET_ALL}")
        return 0, 0
    soma = sum(notas)
    media = soma / len(notas)
    return soma, media

# Fun√ß√£o para exibir gr√°ficos das notas
def exibir_grafico(notas):
    """Exibe um gr√°fico das notas de cada bimestre."""
    bimestres = ['1¬∫', '2¬∫', '3¬∫', '4¬∫']  # Corrigido o nome dos bimestres
    plt.bar(bimestres, notas, color='skyblue')
    plt.xlabel('Bimestres')
    plt.ylabel('Notas')
    plt.title('Desempenho Bimestral do Aluno')
    plt.ylim(0, 10)
    plt.show()

# Fun√ß√£o para exibir o resultado
def exibir_resultado(nome, soma, media, notas):
    """Exibe o resultado do aluno com base nas notas e na lista de recupera√ß√£o."""
    print(f"\n{Fore.CYAN}Soma das notas: {soma:.2f}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}M√©dia: {media:.2f}{Style.RESET_ALL}")

    if nome in recuperacao:
        print(f"{Fore.YELLOW}‚ö†Ô∏è O aluno est√° na lista de recupera√ß√£o. Precisa de um esfor√ßo extra! üí™{Style.RESET_ALL}")
    else:
        if soma >= 20:  # Corrigido o crit√©rio de soma m√≠nima
            print(f"{Fore.GREEN}‚úîÔ∏è Parab√©ns, o aluno est√° aprovado! üéâ{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå Infelizmente, o aluno est√° reprovado. üòî{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}Dica: Revise os conte√∫dos dos bimestres para melhorar!{Style.RESET_ALL}")

    # Exibindo gr√°fico das notas
    exibir_grafico(notas)

# Fun√ß√£o para revisar as notas
def revisar_notas(notas):
    """Permite ao aluno revisar suas notas e atualizar caso necess√°rio."""
    print(f"{Fore.YELLOW}Voc√™ pode revisar as notas agora.{Style.RESET_ALL}")
    for i in range(4):  # Corrigido para iterar sobre os 4 bimestres
        while True:
            try:
                nova_nota = float(input(f"{Fore.CYAN}Digite a nova nota para o {i+1}¬∫ bimestre (atual: {notas[i]}): {Style.RESET_ALL}"))
                if 0 <= nova_nota <= 10:
                    notas[i] = nova_nota
                    break
                else:
                    print(f"{Fore.RED}A nota deve ser um n√∫mero entre 0 e 10.{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}Entrada inv√°lida. Digite um n√∫mero.{Style.RESET_ALL}")
    return notas

# Fun√ß√£o principal
def verificar_aprovacao():
    """Fun√ß√£o principal do programa."""
    print(f"{Fore.BLUE}Bem-vindo ao sistema de avalia√ß√£o escolar!{Style.RESET_ALL}")
    nome = input(f"{Fore.YELLOW}Digite o nome completo do aluno: {Style.RESET_ALL}")
    nome_formatado = validar_nome(nome)

    if nome_formatado is None:
        return

    # Solicitar as notas e calcular a m√©dia
    notas = solicitar_notas()
    soma, media = calcular_media(notas)

    # Exibir resultado
    exibir_resultado(nome_formatado, soma, media, notas)

    # Perguntar se deseja revisar as notas
    revisar = input(f"{Fore.YELLOW}Deseja revisar as notas? (s/n): {Style.RESET_ALL}").strip().lower()
    if revisar == 's':
        notas = revisar_notas(notas)
        soma, media = calcular_media(notas)
        exibir_resultado(nome_formatado, soma, media, notas)
    # Executar o programa
if __name__ == "__main__":
    verificar_aprovacao()
